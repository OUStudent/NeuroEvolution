from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error
from NeuroEvolution import NeuroEvolution
import numpy as np

input = np.asarray([[-1.11848964e+00, -4.71143645e-01,  9.28879708e-01,
        -5.31770488e-01, -8.78044966e-02, -1.40438980e-01],
       [-1.13733335e+00, -5.13362406e-01,  1.17692648e+00,
        -4.81836565e-01, -2.17434180e-01,  2.00225727e-02],
       [-1.10842120e+00, -4.99361947e-01,  6.96310722e-01,
        -5.22859340e-01,  2.26686877e-01, -6.96099797e-02],
       [-1.10562481e+00, -5.10658132e-01,  1.06164202e+00,
        -5.36502352e-01, -6.46438877e-02,  1.17544364e-01],
       [-1.05507760e+00, -4.66860937e-01,  1.03356914e+00,
        -4.56584621e-01, -1.37974132e-01,  1.89176433e-01],
       [-1.19370789e+00, -4.74311179e-01,  9.52288793e-01,
        -4.62939561e-01, -4.56828245e-03, -2.98668449e-02],
       [-1.00765699e+00, -5.18056738e-01,  1.11870437e+00,
        -4.69473387e-01,  1.94692602e-01, -2.32275927e-02],
       [-9.91559960e-01, -4.34535447e-01,  1.04014122e+00,
        -4.90612349e-01,  2.10773223e-01,  1.37229588e-01],
       [-1.01962660e+00, -5.28112794e-01,  1.03079057e+00,
        -5.38501783e-01, -2.69110581e-02, -2.81552397e-01],
       [-1.07347346e+00, -4.98040895e-01,  8.86276950e-01,
        -4.94221473e-01,  6.84369666e-02, -3.91995996e-03],
       [-1.13081055e+00, -4.75774818e-01,  9.03162527e-01,
        -5.09879150e-01, -3.03092098e-01,  2.10629715e-02],
       [-1.01159443e+00, -4.99811475e-01,  7.63249747e-01,
        -5.77713498e-01,  3.36133281e-01,  2.96562369e-02],
       [-9.61718920e-01, -4.99697860e-01,  8.86842075e-01,
        -4.71833738e-01,  1.15195562e-01, -1.66067026e-01],
       [-8.10655680e-01, -5.08740891e-01,  1.02212211e+00,
        -5.09319904e-01,  6.02123840e-02,  2.06350092e-01],
       [-8.87005617e-01, -5.13558896e-01,  9.66232498e-01,
        -5.97163514e-01, -2.06162541e-01, -8.94427359e-02],
       [-9.78400320e-01, -4.55476311e-01,  1.15296596e+00,
        -5.00705514e-01, -2.07887372e-01, -4.51430605e-02],
       [-1.00527563e+00, -5.55116204e-01,  1.03550434e+00,
        -4.73961436e-01,  8.17919799e-03, -1.48514042e-01],
       [-9.58431216e-01, -5.09245756e-01,  1.21508459e+00,
        -4.84200572e-01, -5.64694149e-01,  8.73330090e-02],
       [-8.18679168e-01, -4.91202680e-01,  1.14882326e+00,
        -4.58783598e-01, -9.33235865e-02,  6.20325880e-02],
       [-9.76719064e-01, -5.10854601e-01,  9.11356830e-01,
        -5.12797724e-01, -1.46608683e-01, -1.54923207e-01],
       [-9.42553531e-01, -5.69342988e-01,  9.30077301e-01,
        -4.19331704e-01,  1.34040046e-01,  6.45812307e-02],
       [-9.60593206e-01, -5.40150562e-01,  9.67971055e-01,
        -4.88219204e-01, -4.06095921e-01,  3.28807032e-02],
       [-1.01623041e+00, -4.82543915e-01,  8.20801272e-01,
        -4.81670151e-01, -2.37271068e-01, -1.49250162e-02],
       [-1.02455399e+00, -5.10401162e-01,  1.05577206e+00,
        -4.85558248e-01,  9.10290582e-02,  7.89836092e-02],
       [-1.04504951e+00, -4.88806437e-01,  1.13071527e+00,
        -4.94286852e-01,  1.22075714e-01, -2.61167377e-02],
       [-9.88104693e-01, -5.72554207e-01,  8.54718221e-01,
        -4.52786562e-01,  3.72366917e-01,  4.72346804e-02],
       [-9.98762798e-01, -4.80605630e-01,  8.79986196e-01,
        -5.00007018e-01,  1.51525486e-01,  4.01857052e-03],
       [-1.01055478e+00, -4.64814154e-01,  1.04389905e+00,
        -4.84603407e-01, -1.64963868e-01,  1.56800216e-02],
       [-1.03714106e+00, -4.79723896e-01,  9.70164697e-01,
        -5.14755404e-01,  2.83979006e-01,  1.31767382e-01],
       [-1.01633470e+00, -5.06123380e-01,  9.70245632e-01,
        -5.06853174e-01, -6.24350286e-02, -1.80412328e-01],
       [-1.00601136e+00, -4.75756696e-01,  1.04173941e+00,
        -5.23219005e-01, -4.91746995e-01,  2.18144830e-01],
       [-1.10727858e+00, -4.18307973e-01,  1.07139486e+00,
        -4.89182161e-01,  1.77593585e-01,  1.80643070e-01],
       [-1.20255299e+00, -5.23207530e-01,  9.00706895e-01,
        -5.17230582e-01, -3.24672099e-01,  7.99934812e-04],
       [-9.57418322e-01, -4.69657281e-01,  9.90697743e-01,
        -4.89457498e-01,  4.77026623e-01,  1.40226585e-01],
       [-9.45632593e-01, -4.69022999e-01,  9.29280132e-01,
        -5.61934955e-01,  3.97289971e-01, -1.35469984e-03],
       [-9.97160571e-01, -4.85722919e-01,  1.16983929e+00,
        -5.13679928e-01,  2.13675574e-01,  1.40102666e-03],
       [-9.65880196e-01, -4.62041161e-01,  1.02053935e+00,
        -4.86433941e-01,  1.20482196e-01,  1.13828019e-01],
       [-1.01862842e+00, -4.61285828e-01,  1.02507625e+00,
        -5.08278489e-01, -1.91679233e-01, -1.34441808e-01],
       [-9.38229165e-01, -4.61276718e-01,  1.08246099e+00,
        -5.04207526e-01, -1.01077622e-02,  9.01752777e-02],
       [-9.92275066e-01, -4.56114113e-01,  9.88164298e-01,
        -4.82124910e-01,  5.24566180e-02,  6.97100663e-02],
       [-1.12254369e+00, -4.74391899e-01,  1.14074680e+00,
        -4.51222252e-01, -3.68846882e-02, -8.79294450e-02],
       [-8.75825035e-01, -5.12997388e-01,  8.91231577e-01,
        -4.96976517e-01,  1.90840687e-01,  1.04999348e-02],
       [-9.81495033e-01, -4.79289479e-01,  1.16036637e+00,
        -4.28293287e-01, -3.88725993e-02, -2.93059296e-01],
       [-9.23907381e-01, -4.94901802e-01,  8.59780402e-01,
        -5.13025628e-01,  1.34848349e-01, -1.06694022e-02],
       [-1.23252365e+00, -5.45644299e-01,  1.22385990e+00,
        -4.77904350e-01,  1.97769266e-01, -6.51364715e-02],
       [-1.08917825e+00, -5.23303028e-01,  1.02746291e+00,
        -5.00861544e-01,  1.58136337e-01, -2.54580083e-01],
       [-9.72950679e-01, -5.32740983e-01,  1.07953684e+00,
        -5.06670258e-01,  1.74317613e-01,  9.97260696e-02],
       [-9.99173329e-01, -5.22975168e-01,  1.08200877e+00,
        -5.43635168e-01, -4.48937491e-01,  2.15672829e-01],
       [-9.24265423e-01, -4.55329272e-01,  9.34840251e-01,
        -4.99053547e-01, -4.13073278e-01, -7.09573300e-02],
       [-9.02273266e-01, -4.45840480e-01,  1.03081033e+00,
        -4.55348268e-01,  8.53141159e-03, -4.16259582e-02]])

output = np.asarray([6.39222027, 6.85921991, 5.46541233, 6.21776554, 6.27450232,
       6.73246305, 6.55358748, 6.45326382, 5.80511539, 6.12453985,
       6.64256606, 5.56270944, 5.75876596, 4.76878477, 5.48120788,
       6.65570633, 6.12036082, 7.02876618, 5.58002855, 5.83700483,
       5.739369  , 6.38113927, 5.99663873, 6.28227015, 6.63572846,
       6.03319742, 5.98195423, 6.58441161, 6.34996314, 6.08405146,
       6.47474994, 6.69242874, 6.5988955 , 6.73311942, 6.30732552,
       6.52169709, 6.1501947 , 6.60049394, 6.06200202, 6.2698226,
       6.99183331, 5.3936274 , 6.26922422, 5.48618186, 6.82696049,
       6.26774064, 6.01714461, 6.14561675, 6.55701614, 6.21270017])

size = len(output)
y_train = output[0:int(size*0.80)]
y_test = output[int(size*0.80):size]
x_train = input[0:int(size*0.80),:6]
x_test = input[int(size*0.80):size, :6]


# standard three layer feed forward network:
mlp = MLPRegressor(hidden_layer_sizes=[10, 10, 10], max_iter=5000)
print("-- Training Classic Network Through BackProp: -- ")
mlp.fit(x_train, y_train)
predictions = mlp.predict(x_train)
mse1 = mean_squared_error(y_train, predictions)
print("  MSE Train: " + str(mse1))
predictions = mlp.predict(x_test)
mse1 = mean_squared_error(y_test, predictions)
print("  MSE Test: " + str(mse1))

print("\n-- Evolving EVERYTHING - WILL TAKE SOME TIME --")

neuro = NeuroEvolution(layer_nodes=[10, 10, 10], num_input=6, num_output=1, default_layer_activation='relu')
neuro.evolve(input=x_train, expected_output=y_train, error_function='mse', max_generations=30, evolve_links=True,
             evolve_recurrent_layer=['logistic', 'relu', 'tanh','gaussian'],
             evolve_activation_layer=['logistic', 'relu', 'tanh','gaussian'],  max_gen_size=1000)

predictions = neuro.predict(x_train)
mse1 = mean_squared_error(y_train, predictions)
print("  MSE Train BEST: " + str(mse1))
predictions = neuro.predict(x_train, avg=True)
mse1 = mean_squared_error(y_train, predictions)
print("  MSE Train AVG: " + str(mse1))

predictions = neuro.predict(x_test)
mse1 = mean_squared_error(y_test, predictions)
print("  MSE Test BEST: " + str(mse1))
predictions = neuro.predict(x_test, avg=True)
mse1 = mean_squared_error(y_test, predictions)
print("  MSE Test AVG: " + str(mse1))

